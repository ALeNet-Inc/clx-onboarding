# Wealth Onboarding PWA (LAMP)

A production‑ready blueprint and starter code for a **Progressive Web App** to onboard **Individuals** and **Businesses** opening an **investment account**. The solution follows a **cloud‑native LAMP** architecture (Linux, Apache, MySQL, PHP) with a modern React PWA front‑end. Navigation is a guided **workflow/stepper** with wealth‑appropriate UI.

---

## 1) High‑Level Architecture

```
[ Client (PWA) ]  ———— HTTPS ————>  [ API Gateway / Apache (PHP 8.x) ]  ——>  [ MySQL 8.4 ]
   React + Vite/TS             Apache 2.4 + PHP-FPM (or mod_php)        HA, read replicas
   Service Worker,             Slim/vanilla PHP endpoints                Row‑level security
   Manifest, Push,             JWT auth + refresh tokens                 Encryption at rest
   Offline caching             Mailer (SMTP/SES/SendGrid)                Backups & PITR
                                ↳ Object storage for KYC docs (S3)

Cloud‑native: containerized (Docker/Podman), orchestrated (ECS/Kubernetes), IaC (Terraform),
WAF + CDN + TLS (ACME), Secret Manager for credentials, centralized logging + metrics.
```

### Security & Compliance

* **TLS 1.2+**, HSTS, CSP, X‑Frame‑Options, X‑Content‑Type‑Options, Referrer‑Policy.
* **JWT** access + **opaque refresh tokens** (HTTP‑only, Secure, SameSite=Strict cookies).
* **Rate‑limiting** & IP throttling for auth and verification endpoints.
* **Input validation** (server + client) using allowlists and strict schemas.
* **PII/Financial data**: encrypt sensitive fields (AES‑256 at rest via MySQL TDE or app‑layer crypto with KMS).
* **Audit trail** for profile/ KYC/ investment changes.
* **OWASP ASVS** L2 controls; periodic SAST/DAST; secrets rotated from Secret Manager.

---

## 2) PWA UX & Workflow

**Primary flow**

1. Email capture → send **verification link / OTP**
2. Post‑verification → **Create login** (password) or magic‑link only
3. Choose **Individual** or **Business**
4. Guided **Stepper** per type

**Individuals**

* Personal Data → Contact Info → KYC Personal → Investment Info → Review & e‑Sign → Submit

**Business**

* Company Data → KYC Company → Company Contacts → Investment Info → Beneficial Owners (UBOs) → Review & e‑Sign → Submit

**Design language**: calm neutrals, high contrast, generous whitespace, **stepper** at top, progress, contextual help, save‑and‑resume, accessibility (WCAG AA), mobile‑first.

---

## 3) Data Model (MySQL 8.4)

```sql
-- Users & Auth
CREATE TABLE users (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  email VARCHAR(255) NOT NULL UNIQUE,
  email_verified TINYINT(1) NOT NULL DEFAULT 0,
  password_hash VARCHAR(255) NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE email_verifications (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  purpose ENUM('signup','login') NOT NULL,
  token CHAR(64) NOT NULL,
  expires_at DATETIME NOT NULL,
  consumed_at DATETIME NULL,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Profiles
CREATE TABLE profiles (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  type ENUM('individual','business') NOT NULL,
  status ENUM('draft','submitted','approved','rejected') NOT NULL DEFAULT 'draft',
  display_name VARCHAR(255) NOT NULL,
  country_of_residence CHAR(2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Individual KYC
CREATE TABLE kyc_individual (
  profile_id BIGINT PRIMARY KEY,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  dob DATE NOT NULL,
  nationality CHAR(2) NOT NULL,
  id_type ENUM('passport','national_id','driver_license') NOT NULL,
  id_number VARBINARY(256) NOT NULL, -- encrypted
  address_line1 VARCHAR(255) NOT NULL,
  address_line2 VARCHAR(255),
  city VARCHAR(100) NOT NULL,
  state_region VARCHAR(100),
  postal_code VARCHAR(20),
  phone VARCHAR(30),
  tax_id VARBINARY(256), -- encrypted
  FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

-- Business KYC
CREATE TABLE kyc_company (
  profile_id BIGINT PRIMARY KEY,
  legal_name VARCHAR(255) NOT NULL,
  registration_number VARBINARY(256) NOT NULL, -- encrypted
  country_incorporation CHAR(2) NOT NULL,
  entity_type VARCHAR(100) NOT NULL, -- LLC, Corp, etc.
  registered_address VARCHAR(255) NOT NULL,
  industry VARCHAR(100) NOT NULL,
  tax_id VARBINARY(256), -- encrypted
  FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

CREATE TABLE company_contacts (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  profile_id BIGINT NOT NULL,
  name VARCHAR(150) NOT NULL,
  role_title VARCHAR(120),
  email VARCHAR(255) NOT NULL,
  phone VARCHAR(30),
  is_beneficial_owner TINYINT(1) NOT NULL DEFAULT 0,
  ownership_pct DECIMAL(5,2) DEFAULT 0,
  FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

-- Investment profile (shared)
CREATE TABLE investment_profiles (
  profile_id BIGINT PRIMARY KEY,
  objective ENUM('capital_preservation','income','balanced','growth','aggressive_growth') NOT NULL,
  risk_tolerance ENUM('low','medium','high') NOT NULL,
  horizon ENUM('short','medium','long') NOT NULL,
  knowledge ENUM('basic','intermediate','advanced') NOT NULL,
  initial_deposit DECIMAL(18,2) NOT NULL,
  currencies JSON,
  suitability_ack TINYINT(1) NOT NULL DEFAULT 0,
  FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

-- Documents & audit
CREATE TABLE documents (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  profile_id BIGINT NOT NULL,
  doc_type VARCHAR(50) NOT NULL, -- e.g., passport, utility_bill, articles_of_incorp
  object_key VARCHAR(512) NOT NULL, -- S3 key
  mime_type VARCHAR(100) NOT NULL,
  uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

CREATE TABLE audit_logs (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT,
  profile_id BIGINT,
  action VARCHAR(100) NOT NULL,
  details JSON,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## 4) API (PHP 8.x, Apache) — Minimal Endpoints

> **Note:** You can use Slim or Laravel. Below is **vanilla PHP** with a light router for portability.

**`api/index.php`**

```php
<?php
// Very small router (for brevity). In production use Slim/Laravel & middleware.
require __DIR__.'/lib/bootstrap.php';

$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$method = $_SERVER['REQUEST_METHOD'];
header('Content-Type: application/json');

function route($method, $path) {
  return $_SERVER['REQUEST_METHOD'] === $method && preg_match($path, parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));
}

if (route('POST', '#^/api/auth/request-verification$#')) {
  echo json_encode(request_verification()); exit;
}
if (route('POST', '#^/api/auth/verify$#')) {
  echo json_encode(verify_email()); exit;
}
if (route('POST', '#^/api/auth/login$#')) {
  echo json_encode(login()); exit;
}
if (route('GET',  '#^/api/profile$#')) { require_auth(); echo json_encode(get_profile()); exit; }
if (route('PUT',  '#^/api/profile$#')) { require_auth(); echo json_encode(update_profile()); exit; }
if (route('PUT',  '#^/api/kyc/individual$#')) { require_auth(); echo json_encode(update_kyc_individual()); exit; }
if (route('PUT',  '#^/api/kyc/company$#')) { require_auth(); echo json_encode(update_kyc_company()); exit; }
if (route('PUT',  '#^/api/investment$#')) { require_auth(); echo json_encode(update_investment()); exit; }

http_response_code(404); echo json_encode(['error' => 'Not found']);
```

**`api/lib/bootstrap.php`** (DB, env, helpers)

```php
<?php
require __DIR__.'/vendor/autoload.php';
$env = parse_ini_file(__DIR__.'/../../.env', true);

$pdo = new PDO($env['DB_DSN'], $env['DB_USER'], $env['DB_PASS'], [
  PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
  PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
]);

function json_input() { return json_decode(file_get_contents('php://input'), true) ?? []; }
function now() { return (new DateTimeImmutable('now', new DateTimeZone('UTC')))->format('Y-m-d H:i:s'); }

function sign_jwt($userId) {
  $secret = $_ENV['JWT_SECRET'] ?? 'dev';
  $payload = ['sub'=>$userId,'iat'=>time(),'exp'=>time()+3600];
  return \Firebase\JWT\JWT::encode($payload, $secret, 'HS256');
}

function require_auth() {
  $hdr = $_SERVER['HTTP_AUTHORIZATION'] ?? '';
  if (!preg_match('/Bearer\s+(.*)/', $hdr, $m)) { http_response_code(401); exit; }
  $secret = $_ENV['JWT_SECRET'] ?? 'dev';
  try { $tok = \Firebase\JWT\JWT::decode($m[1], new \Firebase\JWT\Key($secret,'HS256')); $_SERVER['user_id']=$tok->sub; }
  catch (Exception $e) { http_response_code(401); echo json_encode(['error'=>'invalid_token']); exit; }
}
```

**`api/lib/auth.php`** (email OTP/links)

```php
<?php
function request_verification() {
  global $pdo; $in = json_input(); $email = strtolower(trim($in['email'] ?? ''));
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { http_response_code(422); return ['error'=>'invalid_email']; }
  $pdo->beginTransaction();
  $stmt = $pdo->prepare('INSERT INTO users(email,email_verified) VALUES(?,0) ON DUPLICATE KEY UPDATE email=email');
  $stmt->execute([$email]);
  $userId = $pdo->lastInsertId() ?: ($pdo->query("SELECT id FROM users WHERE email=".$pdo->quote($email))->fetch()['id']);
  $token = bin2hex(random_bytes(32));
  $expires = (new DateTimeImmutable('+15 minutes'))->format('Y-m-d H:i:s');
  $pdo->prepare('INSERT INTO email_verifications(user_id,purpose,token,expires_at) VALUES(?,?,?,?)')
      ->execute([$userId,'signup',$token,$expires]);
  $pdo->commit();
  // TODO: send mail via SMTP/SES with link: https://app.example.com/verify?token=$token
  return ['ok'=>true];
}

function verify_email() {
  global $pdo; $in = json_input(); $token = $in['token'] ?? '';
  $stmt = $pdo->prepare('SELECT * FROM email_verifications WHERE token=? AND consumed_at IS NULL AND expires_at>NOW()');
  $stmt->execute([$token]); $row = $stmt->fetch(); if(!$row){ http_response_code(400); return ['error'=>'invalid_or_expired']; }
  $pdo->prepare('UPDATE users SET email_verified=1 WHERE id=?')->execute([$row['user_id']]);
  $pdo->prepare('UPDATE email_verifications SET consumed_at=? WHERE id=?')->execute([now(),$row['id']]);
  return ['ok'=>true, 'jwt'=>sign_jwt($row['user_id'])];
}

function login() {
  global $pdo; $in = json_input(); $email=strtolower(trim($in['email']??'')); $pwd=$in['password']??'';
  $u = $pdo->prepare('SELECT * FROM users WHERE email=?'); $u->execute([$email]); $user=$u->fetch();
  if(!$user || !$user['password_hash'] || !password_verify($pwd,$user['password_hash'])) { http_response_code(401); return ['error'=>'invalid_credentials']; }
  if(!$user['email_verified']) { http_response_code(403); return ['error'=>'email_not_verified']; }
  return ['ok'=>true, 'jwt'=>sign_jwt($user['id'])];
}
```

**`api/lib/profile.php`** (selected handlers — similar for others)

```php
<?php
function get_profile() {
  global $pdo; $uid = $_SERVER['user_id'];
  $stmt = $pdo->prepare('SELECT * FROM profiles WHERE user_id=?'); $stmt->execute([$uid]);
  return ['profile' => $stmt->fetch()];
}

function update_profile() {
  global $pdo; $uid = $_SERVER['user_id']; $in = json_input();
  $type = in_array($in['type'] ?? '', ['individual','business']) ? $in['type'] : null;
  if(!$type) { http_response_code(422); return ['error'=>'invalid_type']; }
  $display = trim($in['display_name'] ?? ''); $country = strtoupper($in['country_of_residence'] ?? '');
  $pdo->prepare('INSERT INTO profiles(user_id,type,display_name,country_of_residence) VALUES(?,?,?,?)
                 ON DUPLICATE KEY UPDATE type=VALUES(type), display_name=VALUES(display_name), country_of_residence=VALUES(country_of_residence)')
      ->execute([$uid,$type,$display,$country]);
  return ['ok'=>true];
}
```

---

## 5) Front‑End PWA (React + Vite + Tailwind + shadcn/ui)

### `index.html`

```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#0a0f1f" />
  <link rel="manifest" href="/manifest.webmanifest" />
  <link rel="icon" href="/icons/icon-192.png" />
  <title>Wealth Onboarding</title>
</head>
<body class="bg-slate-50">
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>
</html>
```

### `public/manifest.webmanifest`

```json
{
  "name": "Wealth Onboarding",
  "short_name": "Onboard",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0a0f1f",
  "theme_color": "#0a0f1f",
  "icons": [
    {"src": "/icons/icon-192.png", "sizes": "192x192", "type": "image/png"},
    {"src": "/icons/icon-512.png", "sizes": "512x512", "type": "image/png"}
  ]
}
```

### `public/service-worker.js`

```js
self.addEventListener('install', (e) => {
  e.waitUntil(
    caches.open('wealth-onboard-v1').then((cache) => cache.addAll([
      '/', '/index.html', '/manifest.webmanifest'
    ]))
  );
});
self.addEventListener('fetch', (e) => {
  e.respondWith(
    caches.match(e.request).then((resp) => resp || fetch(e.request))
  );
});
```

### `src/main.tsx`

```tsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './index.css'

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => navigator.serviceWorker.register('/service-worker.js'))
}

createRoot(document.getElementById('root')!).render(<App />)
```

### `src/App.tsx` (workflow + forms)

```tsx
import React, { useState } from 'react'
import { motion } from 'framer-motion'

const Step = ({ children }: { children: React.ReactNode }) => (
  <motion.div initial={{opacity:0, y:8}} animate={{opacity:1, y:0}} className="max-w-3xl mx-auto bg-white p-6 rounded-2xl shadow">
    {children}
  </motion.div>
)

export default function App(){
  const [stage, setStage] = useState<'email'|'verify'|'choose'|'form'>('email')
  const [type, setType] = useState<'individual'|'business'|null>(null)

  return (
    <div className="min-h-screen p-4 md:p-10 bg-gradient-to-b from-slate-100 to-slate-200">
      <header className="max-w-4xl mx-auto mb-6">
        <h1 className="text-3xl font-semibold text-slate-900">Open an Investment Account</h1>
        <p className="text-slate-600">Secure, guided onboarding for individuals and businesses.</p>
      </header>

      {stage==='email' && (
        <Step>
          <h2 className="text-xl font-medium mb-4">Verify your email</h2>
          <EmailCapture onSent={()=>setStage('verify')} />
        </Step>
      )}

      {stage==='verify' && (
        <Step>
          <h2 className="text-xl font-medium mb-4">Check your inbox</h2>
          <p className="text-slate-600">We sent a link/OTP to verify your email.</p>
          <button className="mt-6 btn" onClick={()=>setStage('choose')}>I verified</button>
        </Step>
      )}

      {stage==='choose' && (
        <Step>
          <h2 className="text-xl font-medium mb-4">Who is opening the account?</h2>
          <div className="grid md:grid-cols-2 gap-4">
            <Card title="Individual" onClick={()=>{setType('individual'); setStage('form')}} />
            <Card title="Business" onClick={()=>{setType('business'); setStage('form')}} />
          </div>
        </Step>
      )}

      {stage==='form' && (
        <Step>
          {type==='individual' ? <IndividualFlow/> : <BusinessFlow/>}
        </Step>
      )}
    </div>
  )
}

function Card({title,onClick}:{title:string;onClick:()=>void}){
  return (
    <button onClick={onClick} className="w-full text-left p-5 rounded-2xl bg-slate-50 hover:bg-white border border-slate-200 shadow-sm">
      <div className="text-lg font-medium">{title}</div>
      <div className="text-slate-600">Guided workflow, save & resume.</div>
    </button>
  )
}

function EmailCapture({onSent}:{onSent:()=>void}){
  const [email,setEmail] = React.useState('')
  const [busy,setBusy] = React.useState(false)
  const send = async ()=>{
    setBusy(true)
    await fetch('/api/auth/request-verification',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})})
    setBusy(false); onSent()
  }
  return (
    <div>
      <label className="block text-sm text-slate-700">Email address</label>
      <input className="mt-1 w-full border rounded-lg p-2" type="email" value={email} onChange={e=>setEmail(e.target.value)} placeholder="you@domain.com"/>
      <button disabled={!email||busy} onClick={send} className="btn mt-3">Send verification</button>
    </div>
  )
}

function Stepper({steps,current}:{steps:string[]; current:number}){
  return (
    <ol className="flex gap-2 mb-6">
      {steps.map((s,i)=> (
        <li key={s} className={`px-3 py-1 rounded-full text-sm ${i<=current? 'bg-slate-900 text-white':'bg-slate-200 text-slate-700'}`}>{i+1}. {s}</li>
      ))}
    </ol>
  )
}

function IndividualFlow(){
  const steps = ['Personal Data','Contact','KYC','Investment','Review']
  const [i,setI] = useState(0)
  return (
    <div>
      <Stepper steps={steps} current={i}/>
      {i===0 && <Section title="Personal Data"><Field label="First name"/><Field label="Last name"/><Field label="Date of Birth" type="date"/><Field label="Nationality"/></Section>}
      {i===1 && <Section title="Contact Information"><Field label="Address"/><Field label="City"/><Field label="State/Region"/><Field label="Postal Code"/><Field label="Phone"/></Section>}
      {i===2 && <Section title="KYC Personal"><Field label="ID Type"/><Field label="ID Number"/><Field label="Tax ID"/></Section>}
      {i===3 && <Section title="Investment Information"><Select label="Objective" options={["Capital Preservation","Income","Balanced","Growth","Aggressive Growth"]}/><Select label="Risk Tolerance" options={["Low","Medium","High"]}/><Field label="Initial Deposit" type="number"/></Section>}
      {i===4 && <Section title="Review & e‑Sign"><p className="text-slate-600">Confirm your details and sign.</p></Section>}
      <NavButtons i={i} setI={setI} n={steps.length}/>
    </div>
  )
}

function BusinessFlow(){
  const steps = ['Company Data','KYC Company','Contacts','Investment','UBOs','Review']
  const [i,setI] = useState(0)
  return (
    <div>
      <Stepper steps={steps} current={i}/>
      {i===0 && <Section title="Company Data"><Field label="Legal Name"/><Field label="Registration Number"/><Field label="Country of Incorporation"/></Section>}
      {i===1 && <Section title="KYC Company"><Field label="Entity Type"/><Field label="Registered Address"/><Field label="Industry"/></Section>}
      {i===2 && <Section title="Company Contacts"><Field label="Contact Name"/><Field label="Email" type="email"/><Field label="Phone"/></Section>}
      {i===3 && <Section title="Investment Information"><Select label="Objective" options={["Capital Preservation","Income","Balanced","Growth","Aggressive Growth"]}/><Select label="Risk Tolerance" options={["Low","Medium","High"]}/></Section>}
      {i===4 && <Section title="Beneficial Owners (UBOs)"><Field label="Owner Name"/><Field label="Ownership %" type="number"/></Section>}
      {i===5 && <Section title="Review & e‑Sign"><p className="text-slate-600">Confirm your details and sign.</p></Section>}
      <NavButtons i={i} setI={setI} n={steps.length}/>
    </div>
  )
}

function Section({title, children}:{title:string;children:React.ReactNode}){
  return (
    <div>
      <h3 className="text-lg font-medium mb-4">{title}</h3>
      <div className="grid md:grid-cols-2 gap-4">{children}</div>
    </div>
  )
}
function Field({label,type='text'}:{label:string; type?:string}){
  return (
    <label className="block">
      <span className="text-sm text-slate-700">{label}</span>
      <input type={type} className="mt-1 w-full border rounded-lg p-2"/>
    </label>
  )
}
function Select({label,options}:{label:string; options:string[]}){
  return (
    <label className="block">
      <span className="text-sm text-slate-700">{label}</span>
      <select className="mt-1 w-full border rounded-lg p-2">{options.map(o=> <option key={o}>{o}</option>)}</select>
    </label>
  )
}
function NavButtons({i,setI,n}:{i:number; setI:(x:number)=>void; n:number}){
  return (
    <div className="mt-6 flex justify-between">
      <button className="btn" disabled={i===0} onClick={()=>setI(i-1)}>Back</button>
      {i < n-1 ? <button className="btn" onClick={()=>setI(i+1)}>Continue</button> : <button className="btn">Submit</button>}
    </div>
  )
}
```

### `src/index.css` (Tailwind utilities ready)

```css
@tailwind base; @tailwind components; @tailwind utilities;
.btn{ @apply inline-flex items-center px-4 py-2 rounded-xl bg-slate-900 text-white hover:bg-slate-800 disabled:opacity-50; }
```

---

## 6) Docker (cloud‑native LAMP)

**`docker-compose.yml`**

```yaml
version: '3.9'
services:
  web:
    image: php:8.3-apache
    volumes: ["./api:/var/www/html/api", "./public:/var/www/html"]
    environment:
      - DB_DSN=mysql:host=db;dbname=wealth;charset=utf8mb4
      - DB_USER=app
      - DB_PASS=app_password
      - JWT_SECRET=change_me
    ports: ["8080:80"]
    depends_on: [db]
  db:
    image: mysql:8.4
    environment:
      - MYSQL_DATABASE=wealth
      - MYSQL_USER=app
      - MYSQL_PASSWORD=app_password
      - MYSQL_ROOT_PASSWORD=root_password
    volumes: ["dbdata:/var/lib/mysql"]
volumes:
  dbdata: {}
```

---

## 7) Best Practices & Enhancements

* **Save & Resume** drafts, autosave on step change.
* **Document capture**: camera upload with live guidance; server‑side virus scan.
* **E‑signature**: integrate DocuSign/Adobe Sign for account agreements.
* **Suitability**: dynamic questionnaires (MiFID/Reg BI inspired) and scoring.
* **Internationalization** (en/es) and locale‑aware validation.
* **Observability**: structured logs (JSON), OpenTelemetry traces, metrics dashboards.
* **CICD**: commit → unit tests → SAST → container build → deploy (Blue/Green or Canary).
* **DR/HA**: multi‑AZ DB, automated backups, PITR; RPO≤4h, RTO≤4h.

---

## 8) How to Run (dev)

1. `docker compose up -d` (starts Apache/PHP + MySQL)

2. Seed DB with the SQL in §3.

3. Start the React app (optional): `npm create vite@latest wealth-onboarding -- --template react-ts` → drop in the files above and `npm run dev`.

4. Visit `http://localhost:8080` (Apache) for API and `http://localhost:5173` (Vite) for the PWA dev server.

---

## 9) Next Steps (tailored)

* Add server‑side validators & sanitizers for each step + schema contracts (OpenAPI).
* Connect email provider and implement OTP/magic‑link.
* Hook **/submit** to back‑office workflow (case management / CRM) and AML/KYC provider.
* Gate deployment via change‑management and vulnerability scans.

---

> This starter is intentionally minimal yet complete: PWA installability, workflow UI, secure auth pattern, LAMP API, and MySQL schema. From here we can extend validations, integrate KYC providers, and apply your branding components for a wealth‑class experience.
